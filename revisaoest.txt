STRUCT

typedef struct Aluno{
    char nome[30]; // Nome do aluno
    int RA;        // Registro Acadêmico do aluno
    float nota;    // Nota do aluno
}A;

int main(){
    A alunos[2]; // Declara um vetor de 2 alunos

    // Preenchimento dos campos do primeiro aluno (a1)
    printf("Informe o nome de a1: ");
    scanf("%s", &alunos[0].nome); // Lê o nome do aluno 1

    printf("Informe o RA de a1: ");
    scanf("%d", &alunos[0].RA); // Lê o RA do aluno 1

    printf("Informe a nota de a1: ");
    scanf("%f", &alunos[0].nota); // Lê a nota do aluno 1

    // Preenchimento dos campos do segundo aluno (a2)
    printf("\n\nInforme o nome de a2: ");
    scanf("%s", &alunos[1].nome); // Lê o nome do aluno 2

    printf("Informe o RA de a2: ");
    scanf("%d", &alunos[1].RA); // Lê o RA do aluno 2

    printf("Informe a nota de a2: ");
    scanf("%f", &alunos[1].nota); // Lê a nota do aluno 2

    // Exibir as informações dos alunos
    printf("\nNome 1: %s\n", alunos[0].nome);
    printf("RA 1: %d\n", alunos[0].RA);
    printf("Nota 1: %.1f\n", alunos[0].nota);

    printf("\nNome 2: %s\n", alunos[1].nome);
    printf("RA 2: %d\n", alunos[1].RA);
    printf("Nota 2: %.1f\n", alunos[1].nota);

    return 0;
}
------------------------------------------------------
PONTEIROS

int main(){
    int y, *p, x;

    y = 0;       // Inicializa y com 0
    p = &y;      // Ponteiro p aponta para y
    x = *p;      // x recebe o valor de y (0)
    x = 4;       // x recebe novo valor 4 (não afeta y)
    (*p)++;      // Incrementa y para 1
    x--;         // x decrementa para 3
    (*p) += x;   // y = y + x = 1 + 3 = 4

    printf("y = %d\n", y); // Exibe o valor final de y (4)

    return 0;
}
------------------------------------------------------
USO DE PONTEIROS COM VETOR

int main(){
    int *ponteiro, i, vetor[100];
    ponteiro = vetor; // Ponteiro aponta para o início do vetor

    // Inicializa todas as posições do vetor com zero
    for(i = 0; i < 100; i++){
        *(ponteiro + i) = 0; // Corrigido: agora zera cada posição corretamente
    }

    // Preenche o vetor com os valores de 1 a 100
    for(i = 0; i < 100; i++){
        *(ponteiro + i) = i + 1;
    }

    // Imprime os valores do vetor (de 1 a 100)
    for(i = 0; i < 100; i++){
        printf("%d ", vetor[i]);
    }

    return 0;
}
------------------------------------------------------
MATRIZ

int main()
{
    // Declaração de uma matriz 3x2 e uma variável auxiliar
    int mat[3][2] = {1, 2, 3, 4, 5, 6}; 
    int aux;

    // Redefinição manual dos valores da matriz (desnecessária pois já foram definidos na linha anterior)
    mat[0][0] = 1;
    mat[0][1] = 2;
    mat[1][0] = 3;
    mat[1][1] = 4;
    mat[2][0] = 5;
    mat[2][1] = 6;

    // Entrada de dados: o usuário insere valores para preencher a matriz
    for(int l = 0; l < 3; l++) {
        for(int c = 0; c < 2; c++) {
            printf("\n Informe o valor: ");
            scanf("%d", &mat[l][c]);  // Armazena o valor digitado na posição [l][c] da matriz
        }
    }

    // Usuário digita um valor para buscar na matriz
    printf("\nDigite o valor a ser buscado: ");
    scanf("%d", &aux);

    // Percorre a matriz procurando o valor
    for(int l = 0; l < 3; l++) {
        for(int c = 0; c < 2; c++) {
            if(mat[l][c] == aux)
                printf("\n Elemento encontrado!");      // Se encontrar, exibe mensagem
            else
                printf("\n Elemento nao encontrado!");  // Caso contrário, também exibe (isso pode gerar muitas mensagens)
        }
    }

    return 0;  // Finaliza o programa
}
------------------------------------------------------
VETOR

int main()
{
    // Declara um vetor com 5 elementos e uma variável para armazenar o maior valor
    int vet[5] = {1, 2, 3, 4, 5};
    int i, maior;

    // Atribui valores manualmente — redundante, pois o vetor já foi inicializado com os mesmos
    vet[0] = 1;
    vet[1] = 2;
    vet[2] = 3;
    vet[3] = 4;
    vet[4] = 5;

    // Entrada de dados para preencher o vetor com valores informados pelo usuário
    for(i = 0; i < 5; i++) {
        printf("\n Informe o valor:\n");
        scanf("%d", &vet[i]);
    }

    // Acha o maior valor no vetor
    for(i = 0; i < 5; i++) {
        if(vet[i] > maior) {
            maior = vet[i];
        }
    }

    // Imprime o maior valor encontrado
    printf("%d", maior);
}
